package models

import (
	"crypto/tls"
	"fmt"
	"log"
	"net"
	"net/url"
	"os"
	"strings"
	"time"

	"github.com/Microsoft/ApplicationInsights-Go/appinsights"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

var (
	OrderList map[string]*Order
)

var (
	database string
	password string
	status   string
)

var username string
var address []string
var isAzure bool
var session *mgo.Session
var asession *mgo.Session
var serr error
var collection *mgo.Collection

var hosts string
var db string

var insightskey = "23c6b1ec-ca92-4083-86b6-eba851af9032"

var rabbitMQURL = os.Getenv("RABBITMQHOST")
var partitionKey = strings.TrimSpace(os.Getenv("PARTITIONKEY"))
var mongoURL = os.Getenv("MONGOHOST")
var teamname = os.Getenv("TEAMNAME")
var eventPolicyName = os.Getenv("EVENTPOLICYNAME")
var eventPolicyKey = os.Getenv("EVENTPOLICYKEY")

var eventURL = os.Getenv("EVENTURL") + "/messages"

var eventURLWithPartition = os.Getenv("EVENTURL") + "/partitions/" + partitionKey + "/messages"

// Order represents the order json
type Order struct {
	ID                string  `required:"false" description:"CosmoDB ID - will be autogenerated"`
	EmailAddress      string  `required:"true" description:"Email address of the customer"`
	PreferredLanguage string  `required:"false" description:"Preferred Language of the customer"`
	Product           string  `required:"false" description:"Product ordered by the customer"`
	Total             float64 `required:"false" description:"Order total"`
	Source            string  `required:"false" description:"Source channel e.g. App Service, Container instance, K8 cluster etc"`
	Status            string  `required:"true" description:"Order Status"`
}

func init() {

	// Let's validate and spool the ENV VARS

	if len(os.Getenv("MONGOHOST")) == 0 {
		log.Print("The environment variable MONGOHOST has not been set")
	} else {
		log.Print("The environment variable MONGOHOST is " + os.Getenv("MONGOHOST"))
	}

	if len(os.Getenv("TEAMNAME")) == 0 {
		log.Print("The environment variable TEAMNAME has not been set")
	} else {
		log.Print("The environment variable TEAMNAME is " + os.Getenv("TEAMNAME"))
	}

	OrderList = make(map[string]*Order)
	//Now we check if this mongo or cosmos // V2
	if strings.Contains(mongoURL, "?ssl=true") {
		isAzure = true

		url, err := url.Parse(mongoURL)
		if err != nil {
			log.Fatal("Problem parsing url: ", err)
		}

		log.Print("user ", url.User)
		// DialInfo holds options for establishing a session with a MongoDB cluster.
		st := fmt.Sprintf("%s", url.User)
		co := strings.Index(st, ":")

		database = st[:co]
		password = st[co+1:]
		log.Print("db ", database, " pwd ", password)
	}
	// V2s

	log.Print("MongoURL: " + mongoURL)

	// DialInfo holds options for establishing a session with a MongoDB cluster.
	dialInfo := &mgo.DialInfo{
		Addrs:    []string{fmt.Sprintf("%s.documents.azure.com:10255", database)}, // Get HOST + PORT
		Timeout:  60 * time.Second,
		Database: database, // It can be anything
		Username: database, // Username
		Password: password, // PASSWORD
		DialServer: func(addr *mgo.ServerAddr) (net.Conn, error) {
			return tls.Dial("tcp", addr.String(), &tls.Config{})
		},
	}

	//V2
	// Create a session which maintains a pool of socket connections
	// to our MongoDB.
	if isAzure == true {
		asession, serr = mgo.DialWithInfo(dialInfo)
		if serr != nil {
			log.Fatal("Can't connect to CosmosDB, go error", serr)
			status = "Can't connect to CosmosDB, go error %v\n"
			os.Exit(1)
		}
		session = asession.Copy()
		log.Println("Writing to CosmosDB")
		db = "CosmosDB"
	} else {
		asession, serr = mgo.Dial(mongoURL)
		if serr != nil {
			log.Fatal("Can't connect to mongo, go error", serr)
			status = "Can't connect to mongo, go error %v\n"
			os.Exit(1)
		}
		session = asession.Copy()
		log.Println("Writing to MongoDB")
		db = "MongoDB"
	}

	// SetSafe changes the session safety mode.
	// If the safe parameter is nil, the session is put in unsafe mode, and writes become fire-and-forget,
	// without error checking. The unsafe mode is faster since operations won't hold on waiting for a confirmation.
	// http://godoc.org/labix.org/v2/mgo#Session.SetMode.
	session.SetSafe(nil)

	// get collection. If database was not set, use the default "k8orders"
	if database == "" { database = "k8orders"}
	collection = session.DB(database).C("orders")

}

func AddOrder(order Order) (orderId string) {

	return orderId
}

func ProcessOrderInMongoDB(order Order) (orderId string) {

	session = asession.Copy()

	log.Println("Team " + teamname)

	if partitionKey == "" {
		partitionKey = "0"
	}

	database = "k8orders"
	password = "" //V2

	defer session.Close()

	// Get Document from collection
	result := Order{}
	log.Println("Looking for ", "{", "id:", order.ID, ",", "status:", "Open", "}")

	err := collection.Find(bson.M{"id": order.ID, "status": "Open"}).One(&result)

	if err != nil {
		//		log.Fatal("Error finding record: ", err)
		//		return
		log.Println("Already Processed")
	} else {

		log.Println("set status: Processed")

		change := bson.M{"$set": bson.M{"status": "Processed"}}
		err = collection.Update(result, change)
		if err != nil {
			log.Fatal("Error updating record: ", err)
			return
		}

	}

	//	Let's write only if we have a key
	if insightskey != "" {
		client := appinsights.NewTelemetryClient(insightskey)
		client.TrackEvent("FulfillOrder:v7 - Team Name " + teamname + " db " + db)
	}

	// Let's place on the file system
	f, err := os.Create("/orders/" + order.ID + ".json")
	check(err)

	fmt.Fprintf(f, "{", "id:", order.ID, ",", "status:", "Processed", "}")

	// Issue a `Sync` to flush writes to stable storage.
	f.Sync()

	return order.ID
}

func check(e error) {
	if e != nil {
		log.Println("order volume not mounted")
	}
}
